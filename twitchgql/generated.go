// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package twitchgql

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// GetStreamsResponse is returned by GetStreams on success.
type GetStreamsResponse struct {
	// Fetch live streams, ordered by the number of viewers descending.
	// languages can be empty or null, which will imply all the languages are included on the results.
	// tags are an array of tag ID as optional filters for streams.
	// DEPRECATED field arguments: platformType, languageTags, tags
	// Use StreamOptions instead.
	Streams GetStreamsStreamsStreamConnection `json:"streams"`
}

// GetStreams returns GetStreamsResponse.Streams, and is useful for accessing the field via an interface.
func (v *GetStreamsResponse) GetStreams() GetStreamsStreamsStreamConnection { return v.Streams }

// GetStreamsStreamsStreamConnection includes the requested fields of the GraphQL type StreamConnection.
// The GraphQL type's documentation follows.
//
// Paginated list of Streams.
type GetStreamsStreamsStreamConnection struct {
	// Used for tracking.
	GenerationID string                                    `json:"generationID"`
	PageInfo     GetStreamsStreamsStreamConnectionPageInfo `json:"pageInfo"`
	// Used for tracking.
	ResponseID string                                             `json:"responseID"`
	Edges      []GetStreamsStreamsStreamConnectionEdgesStreamEdge `json:"edges"`
}

// GetGenerationID returns GetStreamsStreamsStreamConnection.GenerationID, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnection) GetGenerationID() string { return v.GenerationID }

// GetPageInfo returns GetStreamsStreamsStreamConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnection) GetPageInfo() GetStreamsStreamsStreamConnectionPageInfo {
	return v.PageInfo
}

// GetResponseID returns GetStreamsStreamsStreamConnection.ResponseID, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnection) GetResponseID() string { return v.ResponseID }

// GetEdges returns GetStreamsStreamsStreamConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnection) GetEdges() []GetStreamsStreamsStreamConnectionEdgesStreamEdge {
	return v.Edges
}

// GetStreamsStreamsStreamConnectionEdgesStreamEdge includes the requested fields of the GraphQL type StreamEdge.
// The GraphQL type's documentation follows.
//
// Contains information about a Streams's relationship to a given page (connection),
// and the Stream itself.
type GetStreamsStreamsStreamConnectionEdgesStreamEdge struct {
	Node   GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream `json:"node"`
	Cursor string                                                     `json:"cursor"`
}

// GetNode returns GetStreamsStreamsStreamConnectionEdgesStreamEdge.Node, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdge) GetNode() GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream {
	return v.Node
}

// GetCursor returns GetStreamsStreamsStreamConnectionEdgesStreamEdge.Cursor, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdge) GetCursor() string { return v.Cursor }

// GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream includes the requested fields of the GraphQL type Stream.
// The GraphQL type's documentation follows.
//
// A live stream.
type GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream struct {
	// The stream's unique identifier.
	Id string `json:"id"`
	// The associated archive of the stream.
	ArchiveVideo GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo `json:"archiveVideo"`
	// The number of viewers currently watching the stream.
	ViewersCount int `json:"viewersCount"`
	// The time streaming started.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream.Id, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream) GetId() string { return v.Id }

// GetArchiveVideo returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream.ArchiveVideo, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream) GetArchiveVideo() GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo {
	return v.ArchiveVideo
}

// GetViewersCount returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream.ViewersCount, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream) GetViewersCount() int {
	return v.ViewersCount
}

// GetCreatedAt returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo includes the requested fields of the GraphQL type Video.
type GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo struct {
	// The owner of the video.
	Owner GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoOwnerUser `json:"owner"`
	// The game the video is depicting.
	Game GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoGame `json:"game"`
	// The title of the video.
	Title string `json:"title"`
}

// GetOwner returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo.Owner, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo) GetOwner() GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoOwnerUser {
	return v.Owner
}

// GetGame returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo.Game, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo) GetGame() GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoGame {
	return v.Game
}

// GetTitle returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo.Title, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideo) GetTitle() string {
	return v.Title
}

// GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoGame includes the requested fields of the GraphQL type Game.
// The GraphQL type's documentation follows.
//
// A Game is often the subject of a Stream on Twitch.
type GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoGame struct {
	// The name of the game. This string is untranslated.
	// This field should only be used in limited occassions, like tracking and URLs.
	// You should use displayName for all all game names shown to the users.
	Name string `json:"name"`
}

// GetName returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoGame.Name, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoGame) GetName() string {
	return v.Name
}

// GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoOwnerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// Twitch user.
type GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoOwnerUser struct {
	// The user's standard alphanumeric Twitch name.
	Login string `json:"login"`
	// A user-styled version of their login.
	// For international users, this could be the user's login with localized characters.
	DisplayName string `json:"displayName"`
}

// GetLogin returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoOwnerUser) GetLogin() string {
	return v.Login
}

// GetDisplayName returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoOwnerUser.DisplayName, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamArchiveVideoOwnerUser) GetDisplayName() string {
	return v.DisplayName
}

// GetStreamsStreamsStreamConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo is a special field which contains information about the page,
// specifically the cursors which the page starts and ends, and whether or
// not the client can forward-paginate or backward-paginate.
//
// This is part of the Relay Cursor Connections Specification:
// https://facebook.github.io/relay/graphql/connections.htm.
type GetStreamsStreamsStreamConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns GetStreamsStreamsStreamConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetUserIdResponse is returned by GetUserId on success.
type GetUserIdResponse struct {
	// Get a user by their ID or login.
	// If no ID or login is provided, null is returned.
	// Lookup type can tell the resolver to include all users (inclusing deleted and
	// suspended accounts) on the lookup, defaults to only retrieve active users.
	User GetUserIdUser `json:"user"`
}

// GetUser returns GetUserIdResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserIdResponse) GetUser() GetUserIdUser { return v.User }

// GetUserIdUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// Twitch user.
type GetUserIdUser struct {
	// The user's unique identifier.
	Id string `json:"id"`
}

// GetId returns GetUserIdUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserIdUser) GetId() string { return v.Id }

// GetUserStreamResponse is returned by GetUserStream on success.
type GetUserStreamResponse struct {
	// Get a user by their ID or login.
	// If no ID or login is provided, null is returned.
	// Lookup type can tell the resolver to include all users (inclusing deleted and
	// suspended accounts) on the lookup, defaults to only retrieve active users.
	User GetUserStreamUser `json:"user"`
}

// GetUser returns GetUserStreamResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserStreamResponse) GetUser() GetUserStreamUser { return v.User }

// GetUserStreamUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// Twitch user.
type GetUserStreamUser struct {
	// The user's live stream.
	// Null if the user is not currently broadcasting.
	Stream GetUserStreamUserStream `json:"stream"`
}

// GetStream returns GetUserStreamUser.Stream, and is useful for accessing the field via an interface.
func (v *GetUserStreamUser) GetStream() GetUserStreamUserStream { return v.Stream }

// GetUserStreamUserStream includes the requested fields of the GraphQL type Stream.
// The GraphQL type's documentation follows.
//
// A live stream.
type GetUserStreamUserStream struct {
	// The number of viewers currently watching the stream.
	ViewersCount int `json:"viewersCount"`
	// The stream's unique identifier.
	Id string `json:"id"`
	// Information about the game being streamed.
	Game GetUserStreamUserStreamGame `json:"game"`
}

// GetViewersCount returns GetUserStreamUserStream.ViewersCount, and is useful for accessing the field via an interface.
func (v *GetUserStreamUserStream) GetViewersCount() int { return v.ViewersCount }

// GetId returns GetUserStreamUserStream.Id, and is useful for accessing the field via an interface.
func (v *GetUserStreamUserStream) GetId() string { return v.Id }

// GetGame returns GetUserStreamUserStream.Game, and is useful for accessing the field via an interface.
func (v *GetUserStreamUserStream) GetGame() GetUserStreamUserStreamGame { return v.Game }

// GetUserStreamUserStreamGame includes the requested fields of the GraphQL type Game.
// The GraphQL type's documentation follows.
//
// A Game is often the subject of a Stream on Twitch.
type GetUserStreamUserStreamGame struct {
	// The name of the game. This string is untranslated.
	// This field should only be used in limited occassions, like tracking and URLs.
	// You should use displayName for all all game names shown to the users.
	Name string `json:"name"`
}

// GetName returns GetUserStreamUserStreamGame.Name, and is useful for accessing the field via an interface.
func (v *GetUserStreamUserStreamGame) GetName() string { return v.Name }

// __GetStreamsInput is used internally by genqlient
type __GetStreamsInput struct {
	First  int    `json:"first"`
	Cursor string `json:"cursor"`
}

// GetFirst returns __GetStreamsInput.First, and is useful for accessing the field via an interface.
func (v *__GetStreamsInput) GetFirst() int { return v.First }

// GetCursor returns __GetStreamsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetStreamsInput) GetCursor() string { return v.Cursor }

// __GetUserIdInput is used internally by genqlient
type __GetUserIdInput struct {
	Login string `json:"login"`
}

// GetLogin returns __GetUserIdInput.Login, and is useful for accessing the field via an interface.
func (v *__GetUserIdInput) GetLogin() string { return v.Login }

// __GetUserStreamInput is used internally by genqlient
type __GetUserStreamInput struct {
	Login string `json:"login"`
}

// GetLogin returns __GetUserStreamInput.Login, and is useful for accessing the field via an interface.
func (v *__GetUserStreamInput) GetLogin() string { return v.Login }

// first must be between 1 and 30.
// cursor is not included in the result.
func GetStreams(
	ctx context.Context,
	client graphql.Client,
	first int,
	cursor string,
) (*GetStreamsResponse, error) {
	req := &graphql.Request{
		OpName: "GetStreams",
		Query: `
query GetStreams ($first: Int!, $cursor: Cursor!) {
	streams(first: $first, after: $cursor) {
		generationID
		pageInfo {
			hasNextPage
		}
		responseID
		edges {
			node {
				id
				archiveVideo {
					owner {
						login
						displayName
					}
					game {
						name
					}
					title
				}
				viewersCount
				createdAt
			}
			cursor
		}
	}
}
`,
		Variables: &__GetStreamsInput{
			First:  first,
			Cursor: cursor,
		},
	}
	var err error

	var data GetStreamsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetUserId(
	ctx context.Context,
	client graphql.Client,
	login string,
) (*GetUserIdResponse, error) {
	req := &graphql.Request{
		OpName: "GetUserId",
		Query: `
query GetUserId ($login: String!) {
	user(login: $login) {
		id
	}
}
`,
		Variables: &__GetUserIdInput{
			Login: login,
		},
	}
	var err error

	var data GetUserIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetUserStream(
	ctx context.Context,
	client graphql.Client,
	login string,
) (*GetUserStreamResponse, error) {
	req := &graphql.Request{
		OpName: "GetUserStream",
		Query: `
query GetUserStream ($login: String!) {
	user(login: $login) {
		stream {
			viewersCount
			id
			game {
				name
			}
		}
	}
}
`,
		Variables: &__GetUserStreamInput{
			Login: login,
		},
	}
	var err error

	var data GetUserStreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
